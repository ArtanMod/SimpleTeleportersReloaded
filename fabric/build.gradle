plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

boolean inWorkspace = findProject(':SimpleTeleportersReloaded') != null

sourceSets {
    main {
        if(inWorkspace) {
            resources.srcDir project(":SimpleTeleportersReloaded:common").file("src/main/generated")
        } else {
            resources.srcDir project(":common").file("src/main/generated")
        }
    }
}

loom {
    runs {
        named("client") {
            setConfigName("${archives_base_name}-fabric-Client")
        }
        named("server") {
            setConfigName("${archives_base_name}-fabric-Server")
        }
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

boolean inWorkspaceBaseMod = findProject(':ArtanCoreMod') != null
Path fabricLibsPath = findProject(':ArtanCoreMod:fabric').getProjectDir().toPath().resolve("build/libs") as Path
dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-fabric:${rootProject.architectury_version}"

    if(inWorkspace) {
        common(project(path: ":SimpleTeleportersReloaded:common", configuration: "namedElements")) { transitive false }
        shadowCommon(project(path: ":SimpleTeleportersReloaded:common", configuration: "transformProductionFabric")) { transitive false }
    } else {
        common(project(path: ":common", configuration: "namedElements")) { transitive false }
        shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
    }
    if(inWorkspaceBaseMod && Boolean.parseBoolean(is_local_artan_core)) {
        modImplementation files(file(fabricLibsPath.resolve("Artan'sProjectCoreMOD-mc${minecraft_version}-${artan_core_local_version}-dev-shadow.jar")))
    } else {
        implementation fg.deobf("curse.maven:artancore-585454:" + artan_core_version)
    }

    // JEI
    modCompileOnlyApi "mezz.jei:jei-${minecraft_version}-fabric-api:${jei_version}"
    modRuntimeOnly "mezz.jei:jei-${minecraft_version}-fabric:${jei_version}"
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set(null)
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    if(inWorkspace) {
        def commonSources = project(":SimpleTeleportersReloaded:common").sourcesJar
        dependsOn commonSources
        from commonSources.archiveFile.map { zipTree(it) }
    } else {
        def commonSources = project(":common").sourcesJar
        dependsOn commonSources
        from commonSources.archiveFile.map { zipTree(it) }
    }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = mod_id + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}